#!/usr/bin/python

import asm3.configuration
import asm3.i18n
import asm3.medical

from .base import FTPPublisher
from asm3.sitedefs import PETFINDER_FTP_HOST

import os
import sys

class PetFinderPublisher(FTPPublisher):
    """
    Handles publishing to PetFinder.com
    """
    def __init__(self, dbo, publishCriteria):
        publishCriteria.uploadDirectly = True
        publishCriteria.thumbnails = False
        publishCriteria.checkSocket = True
        publishCriteria.scaleImages = 1
        publishCriteria.uploadAllImages = True
        FTPPublisher.__init__(self, dbo, publishCriteria, 
            PETFINDER_FTP_HOST, asm3.configuration.petfinder_user(dbo), 
            asm3.configuration.petfinder_password(dbo))
        self.initLog("petfinder", "PetFinder Publisher")

    def pfDate(self, d):
        """ Returns a CSV entry for a date in YYYY-MM-DD """
        return "\"%s\"" % asm3.i18n.format_date("%Y-%m-%d", d)

    def pfYesNo(self, condition):
        """
        Returns a CSV entry for yes or no based on the condition
        """
        if condition:
            return "\"1\""
        else:
            return "\"\""

    def pfImageUrl(self, urls, index):
        """
        Returns image URL index from urls, returning an empty string if it does not exist.
        """
        try:
            return urls[index]
        except IndexError:
            return ""

    def run(self):

        self.log("PetFinderPublisher starting...")

        if self.isPublisherExecuting(): return
        self.updatePublisherProgress(0)
        self.setLastError("")
        self.setStartPublishing()

        if not self.checkMappedSpecies():
            self.setLastError("Not all species have been mapped.")
            self.cleanup()
            return
        if not self.checkMappedBreeds():
            self.setLastError("Not all breeds have been mapped.")
            self.cleanup()
            return
        shelterid = asm3.configuration.petfinder_user(self.dbo)
        if shelterid == "":
            self.setLastError("No PetFinder.com shelter id has been set.")
            self.cleanup()
            return
        animals = self.getMatchingAnimals()
        if len(animals) == 0:
            self.setLastError("No animals found to publish.")
            self.cleanup()
            return

        if not self.openFTPSocket(): 
            self.setLastError("Failed opening FTP socket.")
            if self.logSearch("530 Login") != -1:
                self.log("Found 530 Login incorrect: disabling PetFinder publisher.")
                asm3.configuration.publishers_enabled_disable(self.dbo, "pf")
            self.cleanup()
            return

        # Make sure necessary folders exist
        self.mkdir("import")
        self.chdir("import")
        self.mkdir("photos")

        # Build a list of age bands for petfinder ages. It's
        # a list of integers in days for each band.
        # The defaults are 6 months, 2 years and 9 years. 
        agebands = asm3.configuration.petfinder_age_bands(self.dbo)
        if agebands == "" or len(agebands.split(",")) != 3:
            agebands = "182,730,3285"
        agebands = [ int(i) for i in agebands.split(",") ]

        csv = []

        anCount = 0
        for an in animals:
            try:
                anCount += 1
                self.log("Processing: %s: %s (%d of %d)" % ( an["SHELTERCODE"], an["ANIMALNAME"], anCount, len(animals)))
                self.updatePublisherProgress(self.getProgress(anCount, len(animals)))

                # If the user cancelled, stop now
                if self.shouldStopPublishing(): 
                    self.log("User cancelled publish. Stopping.")
                    self.resetPublisherProgress()
                    self.cleanup()
                    return

                csv.append( self.processAnimal(an, agebands) )

                # Mark success in the log
                self.logSuccess("Processed: %s: %s (%d of %d)" % ( an["SHELTERCODE"], an["ANIMALNAME"], anCount, len(animals)))

            except Exception as err:
                self.logError("Failed processing animal: %s, %s" % (str(an["SHELTERCODE"]), err), sys.exc_info())

        # Mark published
        self.markAnimalsPublished(animals, first=True)

        # Upload the datafiles
        mapfile = "; PetFinder import map. This file was autogenerated by\n" \
            "; Animal Shelter Manager. http://sheltermanager.com\n" \
            "; The FREE, open source solution for animal sanctuaries and rescue shelters.\n\n" \
            "#SHELTERID:%s\n" \
            "#0:Animal=Animal\n" \
            "#1:Breed=Breed\n" \
            "#2:Age=Age\n" \
            "#3:Name=Name\n" \
            "#4:Size=Size\n" \
            "#5:Sex=Sex\n" \
            "Female=F\n" \
            "Male=M\n" \
            "#6:Description=Dsc\n" \
            "#7:SpecialNeeds=SpecialNeeds\n" \
            "#8:HasShots=HasShots\n" \
            "#9:Altered=Altered\n" \
            "#10:NoDogs=NoDogs\n" \
            "#11:NoCats=NoCats\n" \
            "#12:NoKids=NoKids\n" \
            "#13:Declawed=Declawed\n" \
            "#14:HouseBroken=HouseBroken\n" \
            "#15:Id=Id\n" \
            "#16:Breed2=Breed2\n" \
            "#17:Mix=Mix\n" \
            "#18:arrival_date=arrival_date\n" \
            "#19:birth_date=birth_date\n" \
            "#20:adoption_fee=adoption_fee\n" \
            "#21:display_adoption_fee=display_adoption_fee\n" \
            "#22:special_needs_notes=special_needs_notes\n" \
            "#23:no_other=no_other\n" \
            "#24:no_other_note=no_other_note\n" \
            "#25:photo1=photo1\n" \
            "#26:photo2=photo2\n" \
            "#27:photo3=photo3\n" \
            "#28:photo4=photo4\n" \
            "#29:photo5=photo5\n" \
            "#30:photo6=photo6\n" \
            "#31:tags=tags\n" \
            "#ALLOWUPDATE:Y\n" \
            "#HEADER:N" % shelterid
        self.saveFile(os.path.join(self.publishDir, shelterid + "import.cfg"), mapfile)
        self.saveFile(os.path.join(self.publishDir, shelterid), "\n".join(csv))
        self.log("Uploading datafile and map, %s %s" % (shelterid, shelterid + "import.cfg"))
        self.upload(shelterid)
        self.upload(shelterid + "import.cfg")
        self.log("Uploaded %s %s" % ( shelterid, shelterid + "import.cfg"))
        self.log("-- FILE DATA -- (csv)")
        self.log("\n".join(csv))
        self.log("-- FILE DATA -- (map)")
        self.log(mapfile)
        self.cleanup()

    def processAnimal(self, an, agebands = [ 182, 730, 3285 ]):
        """ Processes an animal and returns a CSV line """
        line = []
        # Mapped species
        line.append("\"%s\"" % an.PETFINDERSPECIES)
        # Breed 1
        line.append("\"%s\"" % an.PETFINDERBREED)
        # Age, one of Adult, Baby, Senior and Young
        ageindays = asm3.i18n.date_diff_days(an.DATEOFBIRTH, asm3.i18n.now(self.dbo.timezone))
        agename = "Adult"
        if ageindays < agebands[0]: agename = "Baby"
        elif ageindays < agebands[1]: agename = "Young"
        elif ageindays < agebands[2]: agename = "Adult"
        else: agename = "Senior"
        line.append("\"%s\"" % agename)
        # Name
        line.append("\"%s\"" % an.ANIMALNAME.replace("\"", "\"\""))
        # Size, one of S, M, L, XL
        ansize = "M"
        if an.SIZE == 0: ansize = "XL"
        elif an.SIZE == 1: ansize = "L"
        elif an.SIZE == 2: ansize = "M"
        elif an.SIZE == 3: ansize = "S"
        line.append("\"%s\"" % ansize)
        # Sex, one of M or F
        sexname = "M"
        if an.SEX == 0: sexname = "F"
        line.append("\"%s\"" % sexname)
        # Description
        line.append("\"%s\"" % self.getDescription(an, False, True))
        # Special needs
        if an.CRUELTYCASE == 1:
            line.append("\"1\"")
        elif an.HASSPECIALNEEDS == 1:
            line.append("\"1\"")
        else:
            line.append("\"\"")
        # Has shots
        line.append(self.pfYesNo(asm3.medical.get_vaccinated(self.dbo, int(an.ID))))
        # Altered
        line.append(self.pfYesNo(an.NEUTERED == 1))
        # No Dogs
        line.append(self.pfYesNo(an.ISGOODWITHDOGS == 1))
        # No Cats
        line.append(self.pfYesNo(an.ISGOODWITHCATS == 1))
        # No Kids
        line.append(self.pfYesNo(an.ISGOODWITHCHILDREN == 1))
        # No Claws
        line.append(self.pfYesNo(an.DECLAWED == 1))
        # Housebroken
        line.append(self.pfYesNo(an.ISHOUSETRAINED == 0))
        # ID
        line.append("\"%s\"" % an.SHELTERCODE)
        # Breed 2
        line.append("\"%s\"" % self.getPublisherBreed(an, 2))
        # Mix
        line.append(self.pfYesNo(an.CROSSBREED == 1))
        # Arrival Date
        line.append(self.pfDate(an.MOSTRECENTENTRYDATE))
        # Birth Date
        line.append(self.pfDate(an.DATEOFBIRTH))
        # Adoption Fee
        line.append("\"%0.2f\"" % (an.FEE / 100))
        # Display adoption fee?
        line.append(self.pfYesNo(an.FEE > 0))
        # Special Needs Notes : Not used
        line.append("\"\"")
        # No Other pets?
        line.append("\"%s\"" % (self.pfYesNo(False)))
        # No Other Note
        line.append("\"\"")
        # photo1-6
        urls = self.getPhotoUrls(an.ID)
        line.append("\"%s\"" % self.pfImageUrl(urls, 0)) # photo1
        line.append("\"%s\"" % self.pfImageUrl(urls, 1)) # photo2
        line.append("\"%s\"" % self.pfImageUrl(urls, 2)) # photo3
        line.append("\"%s\"" % self.pfImageUrl(urls, 3)) # photo4
        line.append("\"%s\"" % self.pfImageUrl(urls, 4)) # photo5
        line.append("\"%s\"" % self.pfImageUrl(urls, 5)) # photo6
        # Tags
        line.append("\"\"")

        return ",".join(line)

